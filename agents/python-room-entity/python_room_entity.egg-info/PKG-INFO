Metadata-Version: 2.4
Name: python-room-entity
Version: 0.1.0
Summary: Python client and AI agent for Metacore RoomServer entities
Author: Metacore Stack
License: MIT
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: signalrcore>=0.9.4
Requires-Dist: openai>=1.14.0
Requires-Dist: pydantic>=2.7.0
Provides-Extra: test
Requires-Dist: pytest>=7.4; extra == "test"
Requires-Dist: pytest-asyncio>=0.23; extra == "test"
Requires-Dist: pytest-timeout>=2.2; extra == "test"
Requires-Dist: requests>=2.32.0; extra == "test"

# Python Room Entity Client & Agent

This package provides a pure-Python implementation of a client and a pluggable
AI agent that can join a Metacore RoomServer room as an entity. It relies on the
SignalR protocol over WebSockets for transport and delegates high level
reasoning to the OpenAI API.

## Features

* **RoomClient** — typed helpers for connecting to a RoomServer hub, joining a
  room, publishing messages, and subscribing to `message` / `event` broadcasts.
* **RoomAgent** — orchestration loop that consumes room activity and asks an
  OpenAI model for the next action to perform (chat, command, or event).
* **OpenAI integration** — thin wrapper around the official `openai` package
  with dependency injection friendly interfaces for testing.
* **Pytest suite** — end-to-end tests that boot the .NET RoomServer in-process
  and verify that the agent can connect, advertise its capabilities, and drive
  port based command messages.

## Getting Started

```bash
cd agents/python-room-entity
python -m venv .venv
source .venv/bin/activate
pip install -e .[test]
pytest
```

To run the agent manually you will need a running RoomServer instance and a
valid OpenAI API key (via `OPENAI_API_KEY`). You can instantiate the agent, join a room, and relay actions from the selected OpenAI model using the provided modules.

## Project Layout

```
python_room_entity/
  agent.py          # High level RoomAgent implementation
  client.py         # SignalR based RoomClient
  config.py         # Typed models (EntitySpec, Message payload helpers)
  openai_client.py  # OpenAI API wrappers and interfaces
```

Tests live under `tests/` and spin up a temporary RoomServer to exercise the
full stack.
